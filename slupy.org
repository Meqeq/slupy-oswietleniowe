#+TITLE: Słupy oświetleniowe
#+AUTHOR: Dawid Jarosz, Tomasz Kolbusz

#+LATEX_HEADER: \makeatletter \@ifpackageloaded{geometry}{\geometry{ a4paper, total={170mm,257mm}, left=15mm, top=15mm }}{\usepackage[margin=1.5cm]{geometry}} \makeatother

* Słupy oświetleniowe

** Cel projektu
Projekt ma za zadanie rozmieścić na mapie miasta słupy oświetleniowe co określoną odległość w pasie drogowym. Słupy nie mogą stać w tym samym miejscu co elementy infrastruktury miasta tj. bramy wjazdowe, chodniki.

** Dane wejściowe

Jako zbiór danych używamy mapy drogowej oraz infrastruktury miasta Washington DC. Dane pochodzą z serwisu [...tutaj link]. Wykorzystaliśmy dane dostępne w zbiorach Roads i Structure_Lines. Zbiory pobraliśmy w formacie shp, pozwoli to na łatwe załadowanie ich do bazy danych.

** Wykorzystane technologie

Do przechowywania danych i ich przetwarzania wykorzystujemy PostgreSQL wraz z rozszerzeniem PostGIS. Do skryptu wyznaczającego położenie słupów wykorzystujemy Deno.

** Podział prac 

Tomasz Kolbusz wymyślił wstępny algorytm, który w późniejszym etapie okazał się niewystarczający.

Dawid Jarosz ulepszył algorytm, który został wspólnie zaimplementowany.

** Uruchomienie aplikacji 

*** Załadowanie danych 

Do załadowania danych z plików shp używamy programu shp2sql. Flaga -D zmienia format wyjściowy z programu na postgres'owy dump, przyspiesza to ładowanie danych. Flaga -I dokłada indeksy GiST na kolumny z geometrią.

#+BEGIN_SRC sh
  shp2pgsql -D -I -s 4326 Structure_Lines_1999.shp Structure_Lines | psql 

  shp2pgsql -D -I -s 4326 Roads.shp Roads | psql 
#+END_SRC

*** Uruchomienie skryptu

Skrypt jest uruchamiany w deno, czyli środowisku uruchomieniowym typescript. Jedną z cech deno jest brak konieczności instalacji zależności. Zostaną one automatycznie pobrane przy starcie skryptu. Sam skrypt pozwala nam wywołać kolejne polecenia SQL za pomocą których wyznaczamy położenie słupów oświetleniowych.

#+BEGIN_SRC sh
    deno run --allow-net app.ts 
#+END_SRC

** Algorytm

1. Wczytanie danych do bazy oraz utworzenie potrzebnych tabel.
2. Wczytanie ze zbioru Roads wszystkich obiektów według typów.

#+BEGIN_SRC sql
    insert into objects2 select descriptio, st_transform(geom, 2855) from roads;
#+END_SRC

[[./img/1.png]]

3. Wyciągnięcie konturów dróg 

Wykorzystując st_boundary i st_buffer możemy wytyczyć obrys drogi w zadanej odległości.

#+BEGIN_SRC sql
    insert into roadsContours
    select
        (st_dump(st_boundary(st_union(st_buffer(geom, ${distanceFromRoad}))))).geom
    from objects
    where description = 'Road' or description = 'Intersection';
#+END_SRC

[[./img/2.png]]



4. Ustawienie słupów wzdłuż dorgi co określony dystans 

Do wyznaczenia początkowego położenia słupów wykorzystujemy funkcje st_lineinterpolatepoints, która pozwala wyznaczyć punkty na lini co zadany dystans. 

#+BEGIN_SRC sql
    insert into initialPolesPlacement 
    select st_lineinterpolatepoints(geom, ${poleSpacing}/st_length(geom)) 
    from roadsContours 
    where st_length(geom) > ${poleSpacing};
#+END_SRC

[[./img/3.png]]

5. Rozwiązanie problemu skrzyżowań

W przypadku skrzyżowań, nie chcieliśmy żeby nasz algorytm ustawił słupy w bliskiej odległości od skrzyżowania, a jednocześnie żeby w pewnej zadanej odległości ustawić słupy, które mogłyby doświetlać przejścia dla pieszych. 

a. Wyznaczenie dwóch stref wokoło skrzyżowania 

W tym punkcie wyznaczamy dwie strefy - większą z której usuniemy postawione słupy, drugą mniejszą, której przeciecie krawędzi z liniami według których wyznaczaliśmy pierwotne położenie słupów. Pozwoli to nam ustawić słupy w zadanej odległości od skrzyżowania (można wykorzystać jako oświetlenie przejść), a uniknąć sytuacji w której postawione słupy będą znajdować się bardzo blisko już postawionych słupów.

#+BEGIN_SRC sql
    insert into intersections 
    select 'clearZone', st_union(st_buffer(geom, ${clearZoneSize})) 
    from objects 
    where description = 'Intersection';

    insert into intersections 
    select 'placeZone', st_union(st_buffer(geom, ${placeZoneSize})) 
    from objects 
    where description = 'Intersection';
#+END_SRC

[[./img/4.png]]

b. Usunięcie słupów z większej strefy

#+BEGIN_SRC sql
    insert into polesAfterIntersections 
    select (st_dump(st_difference(
        (select st_union(geom) from initialpolesplacement), 
        (select st_union(geom) from intersections where type = 'clearZone')))
    ).geom;
#+END_SRC

c. Dodanie słupów na przecięciach 

#+BEGIN_SRC sql
    insert into polesAfterIntersections 
    select st_intersection(
        (select st_boundary(st_union(geom)) from intersections where type = 'placeZone'), 
        (select st_union(geom) from roadsContours)
    );
#+END_SRC

[[./img/5.png]]

6. Znalezienie przeszkód które uniemożliwiają postawienie słupów. 

Tutaj jako przeszkody zakwalifikowaliśmy pozostałe obiekty ze zbioru Roads, takie jak alejki, parkingi, podjazdy oraz zbiór Structure_Lines.

#+BEGIN_SRC sql
    insert into obstacles 
    select st_buffer(st_union(geom), 3) 
    from objects 
    where description != 'Road' and description != 'Intersection';
#+END_SRC

[[./img/6.png]]

7. Usunięcie słupów które kolidują z przeszkodami.

#+BEGIN_SRC sql
    insert into clearedFromObstacles 
    select (st_dump(st_difference(
        (select st_union(geom) from polesAfterIntersections),
        (select st_union(geom) from obstacles)))
    ).geom;
#+END_SRC

8. Rozwiązanie problemu z brakującymi słupami po usunięciu kolidujących.

Po usunięciu kolidujących słupów odległości między niektórymi słupami mogą być znacznie większe niż założone, dlatego postanowiliśmy usunięte punkty przesunąć na pozycję na której nie będą kolidowały z innymi obiektami. 

a. Wybranie uniętych punktów.

#+BEGIN_SRC sql
    insert into toMove 
    select (st_dump(st_intersection(
        (select st_union(geom) from polesAfterIntersections), 
        (select st_union(geom) from obstacles)))
    ).geom;
#+END_SRC

b. Znalezienie lini według których były ustawiane słupy, ale wycięcie części które kolidują z obiektami

#+BEGIN_SRC sql
    insert into contoursWithoutObstacles 
    select st_difference(
        (select st_union(geom) from roadscontours), 
        (select st_union(geom) from obstacles)
    );
#+END_SRC

c. Znalezienie najbliższych punktów, które nie kolidują z przeszkodami. 

W tym miejscu dla każdego usuniętego punktu szukamy najbliższego możliwego położenia dla punktu. Efektywnie to przesuwa punkt na lini która przechodzi przez tą przeszkodę, stawiając go po najbliższej stronie przeszkody.

#+BEGIN_SRC sql
      insert into movedPoints 
      select st_closestPoint((select geom from contoursWithoutObstacles), geom) 
      from tomove;
#+END_SRC

[[./img/7.png]]

Szare punkty zostały przesunięte do pozycji niebieskich punktów.

9. Znalezienie punktów które postawione są za blisko siebie i usunięcie ich.

  #+BEGIN_SRC sql
            insert into finalPoles select ST_RemoveRepeatedPoints(st_collect(geom), ${minLength}) from clearedFromObstacles;
  #+END_SRC

[[./img/8.png]]

[[./img/9.png]]



